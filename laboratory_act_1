#include <iostream>
#include <string>

struct Node {
    std::string data;
    Node* next;
};

class LinkedList {
public:
    LinkedList() : head(nullptr) {}

    void insertAtBeginning(const std::string& data) {
        Node* newNode = new Node{data, head};
        head = newNode;
    }

    void insertAtEnd(const std::string& data) {
        Node* newNode = new Node{data, nullptr};
        if (!head) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    void insertAfter(const std::string& target, const std::string& data) {
        Node* temp = head;
        while (temp && temp->data != target) {
            temp = temp->next;
        }
        if (temp) {
            Node* newNode = new Node{data, temp->next};
            temp->next = newNode;
        } else {
            std::cout << "Target node not found.\n";
        }
    }

    void deleteNode(const std::string& data) {
        if (!head) return;

        if (head->data == data) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }

        Node* temp = head;
        while (temp->next && temp->next->data != data) {
            temp = temp->next;
        }

        if (temp->next) {
            Node* nodeToDelete = temp->next;
            temp->next = temp->next->next;
            delete nodeToDelete;
        } else {
            std::cout << "Node with data \"" << data << "\" not found.\n";
        }
    }

    void printList() const {
        Node* temp = head;
        int index = 1;
        std::cout << "Linked list:\n";
        while (temp) {
            std::cout << "[" << index++ << "]: " << temp->data << "\n";
            temp = temp->next;
        }
    }

    ~LinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

private:
    Node* head;
};

void displayMenu() {
    std::cout << "\nMenu:\n"
              << "1. Insert a new node at the beginning of the list\n"
              << "2. Insert a new node at the end of the list\n"
              << "3. Insert a new node after a specified node\n"
              << "4. Delete a node with a specified string value\n"
              << "5. Print all elements of the linked list \n"
              << "6. Exit\n"
              << "Enter your choice: ";
}

int main() {
    LinkedList list;
    int choice;
    std::string data, target;

    do {
        displayMenu();
        std::cin >> choice;
        std::cin.ignore();

        switch (choice) {
            case 1:
                std::cout << "Enter data to insert at the beginning: ";
                std::getline(std::cin, data);
                list.insertAtBeginning(data);
                break;
            case 2:
                std::cout << "Enter data to insert at the end: ";
                std::getline(std::cin, data);
                list.insertAtEnd(data);
                break;
            case 3:
                std::cout << "Enter target node data to insert after: ";
                std::getline(std::cin, target);
                std::cout << "Enter data to insert: ";
                std::getline(std::cin, data);
                list.insertAfter(target, data);
                break;
            case 4:
                std::cout << "Enter data to delete: ";
                std::getline(std::cin, data);
                list.deleteNode(data);
                break;
            case 5:
                list.printList();
                break;
            case 6:
                std::cout << "Exiting...\n";
                break;
            default:
                std::cout << "Invalid choice. Try again.\n";
                break;
        }
    } while (choice != 6);

    return 0;
}
